import { Schema, SchemaOptions } from './schema.js';
import { ArraySchema } from './schemas/arraySchema.js';
import { BooleanSchema } from './schemas/booleanSchema.js';
import { DateSchema } from './schemas/dateSchema.js';
import { EqualSchema } from './schemas/equalSchema.js';
import { ErrorSchema } from './schemas/errorSchema.js';
import { InstanceofSchema } from './schemas/instanceofSchema.js';
import { NullSchema } from './schemas/nullSchema.js';
import { NumberSchema } from './schemas/numberSchema.js';
import { Object2Schema } from './schemas/object2Schema.js';
import { ObjectSchema, ObjectSchemaItems, ObjectSchemaOptions } from './schemas/objectSchema.js';
import { DiscriminatorSchema } from './schemas/objectSchema/discriminatorSchema.js';
import { OptionalSchema } from './schemas/objectSchema/optionalSchema.js';
import { OrSchema } from './schemas/orSchema.js';
import { RegExpSchema } from './schemas/regExpSchema.js';
import { StringSchema, StringSchemaOptions } from './schemas/stringSchema.js';
import { UndefinedSchema } from './schemas/undefinedSchema.js';
import { UnknownSchema } from './schemas/unknownSchema.js';
export type AbstractClass<T> = (abstract new (...args: any[]) => T);
export type FunctionOfAnyType = (..._args: any[]) => any;
export type RecordOf<Type> = Record<string, Type | undefined>;
interface ErrnoException extends Error {
    errno?: number | undefined;
    code?: string | undefined;
    path?: string | undefined;
    syscall?: string | undefined;
}
export declare class Vts {
    static array<S extends Schema<unknown>>(_elementsSchema: S, _options?: SchemaOptions): ArraySchema<S>;
    static boolean(_options?: SchemaOptions): BooleanSchema;
    static date(_options?: SchemaOptions): DateSchema;
    static dateString(_options?: StringSchemaOptions): StringSchema;
    static discriminator<S extends Schema<unknown>>(_schema: S): DiscriminatorSchema<S>;
    static enum<T>(_value: Record<any, T>, _options?: SchemaOptions): OrSchema<EqualSchema<T>>;
    static equal<S>(_value: S, _options?: SchemaOptions): EqualSchema<S>;
    static error(_options?: SchemaOptions): ErrorSchema;
    static false(_options?: SchemaOptions): EqualSchema<false>;
    static instanceof<S>(_constructor: AbstractClass<S>, _options?: SchemaOptions): InstanceofSchema<S>;
    static null(_options?: SchemaOptions): NullSchema;
    static number(_options?: SchemaOptions): NumberSchema;
    static object<Items extends ObjectSchemaItems>(_items: Items, _options?: ObjectSchemaOptions): ObjectSchema<Items>;
    static object2<KeySchema extends StringSchema, ValuesSchema extends Schema<unknown>>(_keySchema: KeySchema, _valuesSchema: ValuesSchema, _options?: SchemaOptions): Object2Schema<KeySchema, ValuesSchema>;
    static optional<S extends Schema<unknown>>(_schema: S): OptionalSchema<S>;
    static or<S extends Schema<unknown>>(_schemas: S[], _options?: SchemaOptions): OrSchema<S>;
    static regexp(_options?: SchemaOptions): RegExpSchema;
    static string(_options?: StringSchemaOptions): StringSchema;
    static true(_options?: SchemaOptions): EqualSchema<true>;
    static unknown(_options?: SchemaOptions): UnknownSchema;
    static undefined(_options?: SchemaOptions): UndefinedSchema;
    static isArray(_val: unknown): _val is unknown[];
    static isBoolean(_val: unknown): _val is boolean;
    static isDate(_val: unknown): _val is Date;
    static isError(_val: unknown): _val is Error;
    static isFinite(_val: unknown): boolean;
    static isFunction<T extends FunctionOfAnyType>(_val: unknown): _val is T;
    static isInteger(_val: unknown): _val is number;
    static isInstanceOf<T>(_val: unknown, _class: AbstractClass<T>): _val is T;
    static isNull(_val: unknown): _val is null;
    static isNumber(_val: unknown): _val is number;
    static isObject(_val: unknown, _strict?: boolean): _val is RecordOf<unknown>;
    static isRegExp(_val: unknown): _val is RegExp;
    static isString(_val: unknown): _val is string;
    static isSystemError(_val: unknown, _code?: string): _val is ErrnoException;
    static isUndefined(_val: unknown): _val is undefined;
}
export {};
